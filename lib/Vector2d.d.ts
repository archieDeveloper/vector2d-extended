declare class Vector2d {
    x: number;
    y: number;
    constructor(x?: number, y?: number);
    static readonly ZERO: Vector2d;
    static readonly ONE: Vector2d;
    static readonly UP: Vector2d;
    static readonly DOWN: Vector2d;
    static readonly RIGHT: Vector2d;
    static readonly LEFT: Vector2d;
    static clampMagnitude(a: Vector2d, maxLength: number): Vector2d;
    static clampLength(): any;
    static lerp(a: Vector2d, b: Vector2d, l: number): Vector2d;
    static scale(): Vector2d;
    static scaleX(): any;
    static scaleY(): Vector2d;
    static add(): Vector2d;
    static addX(): any;
    static addY(): Vector2d;
    static subtract(): Vector2d;
    static subtractX(): any;
    static subtractY(): Vector2d;
    static multiply(): Vector2d;
    static multiplyX(): Vector2d;
    static multiplyY(): Vector2d;
    static divide(): Vector2d;
    static divideX(): Vector2d;
    static divideY(): Vector2d;
    static normalize(a: Vector2d): Vector2d;
    static project(a: Vector2d, b: Vector2d): Vector2d;
    static round(a: Vector2d): Vector2d;
    static roundX(a: Vector2d): Vector2d;
    static roundY(a: Vector2d): Vector2d;
    static invert(a: Vector2d): Vector2d;
    static invertX(a: Vector2d): Vector2d;
    static invertY(a: Vector2d): Vector2d;
    set(x: number, y: number): Vector2d;
    add(): Vector2d;
    addX(): Vector2d;
    addY(): Vector2d;
    subtract(): Vector2d;
    subtractX(): Vector2d;
    subtractY(): Vector2d;
    multiply(): Vector2d;
    multiplyX(): Vector2d;
    multiplyY(): Vector2d;
    divide(): Vector2d;
    divideX(): Vector2d;
    divideY(): Vector2d;
    normalize(): Vector2d;
    project(b: Vector2d): Vector2d;
    round(): Vector2d;
    roundX(): Vector2d;
    roundY(): Vector2d;
    zero(): Vector2d;
    zeroX(): Vector2d;
    zeroY(): Vector2d;
    clone(): Vector2d;
    equate(b: Vector2d): Vector2d;
    equateX(b: Vector2d): Vector2d;
    equateY(b: Vector2d): Vector2d;
    invert(): Vector2d;
    invertX(): Vector2d;
    invertY(): Vector2d;
    lerp(b: Vector2d, l: number): Vector2d;
    scale(): Vector2d;
    scaleX(): Vector2d;
    scaleY(): Vector2d;
    clampMagnitude(maxLength: number): Vector2d;
    clampLength(): Vector2d;
    lengthSquared: number;
    rotate: number;
    magnitudeSquared: number;
    magnitude: number;
    length: number;
    dot(b: Vector2d): number;
    cross(b: Vector2d): number;
    distance(b: Vector2d): number;
    distanceSquared(b: Vector2d): number;
    angle(b: Vector2d): number;
    areaTriangle(b: Vector2d): number;
    areaParallelogram(b: Vector2d): number;
    isZero(): boolean;
    isZeroX(): boolean;
    isZeroY(): boolean;
    isEqual(b: Vector2d): boolean;
    isEqualX(b: Vector2d): boolean;
    isEqualY(b: Vector2d): boolean;
    isNaN(): boolean;
    isNaNX(): boolean;
    isNaNY(): boolean;
    isFinite(): boolean;
    isFiniteX(): boolean;
    isFiniteY(): boolean;
    isEqualRotate(b: Vector2d): boolean;
    isEqualInvertRotate(b: Vector2d): boolean;
    isCollinear(b: Vector2d): boolean;
    isOrthogonal(b: Vector2d): boolean;
}
export default Vector2d;
